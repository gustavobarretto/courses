// Nesse exerc√≠cio, voc√™ est√° livre para escolher os nomes para suas vari√°veis e fun√ß√µes! üòÑ
// Crie uma fun√ß√£o que receba dois argumentos e retorne a soma dos mesmos.
let soma = (a, b) => a + b;
console.log(soma(5, 22))

// Declare uma vari√°vel que receba a invoca√ß√£o da fun√ß√£o criada acima, passando dois n√∫meros quaisquer por argumento, e somando `5` ao resultado retornado da fun√ß√£o.
// Qual o valor atualizado dessa vari√°vel?
let soma5 = soma(5, 22) + 5
console.log(soma5)

// Declare uma nova vari√°vel, sem valor.
let semValor = ''


/*
Crie uma fun√ß√£o que adicione um valor √† vari√°vel criada acima, e retorne a string:
    O valor da vari√°vel agora √© VALOR.
Onde VALOR √© o novo valor da vari√°vel.
*/
semValor = (a, b) => a - b;
console.log('O valor da vari√°vel √© ' + semValor(234, 123) + '.')

// Invoque a fun√ß√£o criada acima.
console.log(semValor)

// Qual o retorno da fun√ß√£o? (Use coment√°rios de bloco).
console.log(semValor(234,123))

/*
Crie uma fun√ß√£o com as seguintes caracter√≠sticas:
1. A fun√ß√£o deve receber 3 argumentos;
2. Se qualquer um dos tr√™s argumentos n√£o estiverem preenchidos, a fun√ß√£o deve retornar a string:
    Preencha todos os valores corretamente!
3. O retorno da fun√ß√£o deve ser a multiplica√ß√£o dos 3 argumentos, somando `2` ao resultado da multiplica√ß√£o.
*/
let funcao3 = (a, b, c) => {
    if(a == undefined || b == undefined || c == undefined) {
        return 'Preecha todos os valores corretamente!';
    } else {
        return (a*b*c) + 2
    }
} 



// Invoque a fun√ß√£o criada acima, passando s√≥ dois n√∫meros como argumento.
// Qual o resultado da invoca√ß√£o acima? (Use coment√°rios para mostrar o valor retornado).
console.log(funcao3(1, 2));

// Agora invoque novamente a fun√ß√£o criada acima, mas passando todos os tr√™s argumentos necess√°rios.
// Qual o resultado da invoca√ß√£o acima? (Use coment√°rios para mostrar o valor retornado).
console.log(funcao3(1, 2, 3))

/*
Crie uma fun√ß√£o com as seguintes caracter√≠sticas:
1. A fun√ß√£o deve receber 3 argumentos.
2. Se somente um argumento for passado, retorne o valor do argumento.
3. Se dois argumentos forem passados, retorne a soma dos dois argumentos.
4. Se todos os argumentos forem passados, retorne a soma do primeiro com o segundo, e o resultado, dividido pelo terceiro.
5. Se nenhum argumento for passado, retorne o valor booleano `false`.
6. E ainda, se nenhuma das condi√ß√µes acima forem atendidas, retorne `null`.
*/


// Invoque a fun√ß√£o acima utilizando todas as possibilidades (com nenhum argumento, com um, com dois e com tr√™s.) Coloque um coment√°rio de linha ao lado da fun√ß√£o com o resultado de cada invoca√ß√£o.
